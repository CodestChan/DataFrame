测试顺序表的代码
/*
 	SqList L;
	InitList(L);
	ListInsert(L, 1, 18);
	ListInsert(L, 1, 52);
	ListInsert(L, 1, 96);
	int search;
	GetElem(L, 2, search);
	int index = LocateElem(L, 96);
	cout << search << endl;
	cout << index << endl;
	TraverseList(L);
*/

测试单链表的代码
/*
* 	LinkList L;
	InitLinkList(L);
	ListLinkInsert(L, 1, 15);
	ListLinkInsert(L, 2, 52);
	ListLinkInsert(L, 3, 69);
	int elem;
	GetLinkElem(L, 2, elem);
	LinkList index;
	index=LocateLinkElem(L, 52);
	LinkList p;
	p = L->next;
	while (p) {
		cout << p->data<<endl;
		p=p->next;
	}
	cout << "第二个元素是：" << elem<<endl;
	cout << "数值为52的元素位置是：" << index << endl;
	cout << index->data << " " << index->next << endl;
*/

//循环链表测试：插入和遍历
/*
	CirLink L;
	InitCirLink(L);
	CirLinkInsert(L, 1, 23);
	CirLinkInsert(L, 1, 24);
	CirLink p;
	p = L;
	while (p->next != L) {
		p = p->next;
		cout << p->cdata << endl;
	}
	return 0;
*/
//循环链表测试：循环遍历
/*
	CirLink p=L;
	for (int i = 0; i < 10; i++) {
		p = p->next;
		if (p == L)continue;
		cout << p->cdata << endl;
		cout << endl;
	}
*/

//双向链表测试
/*
	DuLinkList L;
	InitDuLink(L);
	CreateDul(L, 2);
	DulInsert(L, 1, 5);
	DuLinkList p = L;
	while (p->next != nullptr) {
		p=p->next;
		cout << p->Ddata << endl;
	}
*/

//栈测试
/*
	SqStack S;
	InitStack(S);
	Push(S, 12);
	Push(S, 58);
	Push(S, 10);
	int* p = S.top;
	while (p != S.base) {
		p--;
		cout << *p << endl;
	}
	int g;
	Pop(S, g);
	cout << g << endl;
	int* s = S.top;
	while (s != S.base) {
		s--;
		cout << *s << endl;
	}
*/

//链栈测试
/*
	LinkStack S;
	InitStack(S);
	Push(S, 12);
	Push(S, 58);
	Push(S, 10);
	LinkStack p;
	p = S;
	while (p != nullptr) {
		cout << p->data << endl;
		p = p->next;
	}
	int g;
	Pop(S, g);
	cout << g << endl;
	LinkStack s;
	s = S;
	while (s != nullptr) {
		cout << s->data << endl;
		s = s->next;
	}
*/

//队列测试
/*
	SqQueue Q;
	InitQueue(Q);
	EnQueue(Q, 12);
	EnQueue(Q, 58);
	EnQueue(Q, 10);
	int q = Q.front;
	while (q % MAXSIZE != Q.rear) {
		cout << Q.base[q] << endl;
		q = (q + 1) % MAXSIZE;
	}
*/

//链队测试
/*
	LinkQueue Q;
	InitQueue(Q);
	EnQueue(Q, 12);
	EnQueue(Q, 58);
	EnQueue(Q, 10);
	QueuePtr p;
	p = Q.front;
	while (p->next != nullptr) {
		p = p->next;
		cout << p->data << endl;
	}
	cout << endl;
	int e;
	DeQueue(Q, e);
	cout << e << endl;
	cout << endl;
	QueuePtr s;
	s = Q.front;
	while (s->next!=nullptr) {
		s = s->next;
		cout << s->data << endl;
	}
*/